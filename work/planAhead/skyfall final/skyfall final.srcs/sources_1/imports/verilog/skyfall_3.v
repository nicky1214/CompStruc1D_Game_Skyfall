/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module skyfall_3 (
    input clk,
    input rst,
    input button_L,
    input button_R,
    input button_start,
    output reg [63:0] ledmatrix,
    output reg [6:0] score,
    output reg [2:0] stages
  );
  
  
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_7 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [16-1:0] M_alu0_alu;
  wire [1-1:0] M_alu0_z;
  wire [1-1:0] M_alu0_v;
  wire [1-1:0] M_alu0_n;
  reg [6-1:0] M_alu0_alufn;
  reg [16-1:0] M_alu0_a;
  reg [16-1:0] M_alu0_b;
  alu_7 alu0 (
    .alufn(M_alu0_alufn),
    .a(M_alu0_a),
    .b(M_alu0_b),
    .alu(M_alu0_alu),
    .z(M_alu0_z),
    .v(M_alu0_v),
    .n(M_alu0_n)
  );
  
  wire [16-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  reg [6-1:0] M_alu1_alufn;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  alu_7 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n)
  );
  
  wire [16-1:0] M_alu2_alu;
  wire [1-1:0] M_alu2_z;
  wire [1-1:0] M_alu2_v;
  wire [1-1:0] M_alu2_n;
  reg [6-1:0] M_alu2_alufn;
  reg [16-1:0] M_alu2_a;
  reg [16-1:0] M_alu2_b;
  alu_7 alu2 (
    .alufn(M_alu2_alufn),
    .a(M_alu2_a),
    .b(M_alu2_b),
    .alu(M_alu2_alu),
    .z(M_alu2_z),
    .v(M_alu2_v),
    .n(M_alu2_n)
  );
  
  wire [16-1:0] M_alu3_alu;
  wire [1-1:0] M_alu3_z;
  wire [1-1:0] M_alu3_v;
  wire [1-1:0] M_alu3_n;
  reg [6-1:0] M_alu3_alufn;
  reg [16-1:0] M_alu3_a;
  reg [16-1:0] M_alu3_b;
  alu_7 alu3 (
    .alufn(M_alu3_alufn),
    .a(M_alu3_a),
    .b(M_alu3_b),
    .alu(M_alu3_alu),
    .z(M_alu3_z),
    .v(M_alu3_v),
    .n(M_alu3_n)
  );
  
  wire [16-1:0] M_alu4_alu;
  wire [1-1:0] M_alu4_z;
  wire [1-1:0] M_alu4_v;
  wire [1-1:0] M_alu4_n;
  reg [6-1:0] M_alu4_alufn;
  reg [16-1:0] M_alu4_a;
  reg [16-1:0] M_alu4_b;
  alu_7 alu4 (
    .alufn(M_alu4_alufn),
    .a(M_alu4_a),
    .b(M_alu4_b),
    .alu(M_alu4_alu),
    .z(M_alu4_z),
    .v(M_alu4_v),
    .n(M_alu4_n)
  );
  
  wire [16-1:0] M_alu5_alu;
  wire [1-1:0] M_alu5_z;
  wire [1-1:0] M_alu5_v;
  wire [1-1:0] M_alu5_n;
  reg [6-1:0] M_alu5_alufn;
  reg [16-1:0] M_alu5_a;
  reg [16-1:0] M_alu5_b;
  alu_7 alu5 (
    .alufn(M_alu5_alufn),
    .a(M_alu5_a),
    .b(M_alu5_b),
    .alu(M_alu5_alu),
    .z(M_alu5_z),
    .v(M_alu5_v),
    .n(M_alu5_n)
  );
  
  wire [16-1:0] M_alu6_alu;
  wire [1-1:0] M_alu6_z;
  wire [1-1:0] M_alu6_v;
  wire [1-1:0] M_alu6_n;
  reg [6-1:0] M_alu6_alufn;
  reg [16-1:0] M_alu6_a;
  reg [16-1:0] M_alu6_b;
  alu_7 alu6 (
    .alufn(M_alu6_alufn),
    .a(M_alu6_a),
    .b(M_alu6_b),
    .alu(M_alu6_alu),
    .z(M_alu6_z),
    .v(M_alu6_v),
    .n(M_alu6_n)
  );
  
  wire [16-1:0] M_alu7_alu;
  wire [1-1:0] M_alu7_z;
  wire [1-1:0] M_alu7_v;
  wire [1-1:0] M_alu7_n;
  reg [6-1:0] M_alu7_alufn;
  reg [16-1:0] M_alu7_a;
  reg [16-1:0] M_alu7_b;
  alu_7 alu7 (
    .alufn(M_alu7_alufn),
    .a(M_alu7_a),
    .b(M_alu7_b),
    .alu(M_alu7_alu),
    .z(M_alu7_z),
    .v(M_alu7_v),
    .n(M_alu7_n)
  );
  
  wire [16-1:0] M_alu8_alu;
  wire [1-1:0] M_alu8_z;
  wire [1-1:0] M_alu8_v;
  wire [1-1:0] M_alu8_n;
  reg [6-1:0] M_alu8_alufn;
  reg [16-1:0] M_alu8_a;
  reg [16-1:0] M_alu8_b;
  alu_7 alu8 (
    .alufn(M_alu8_alufn),
    .a(M_alu8_a),
    .b(M_alu8_b),
    .alu(M_alu8_alu),
    .z(M_alu8_z),
    .v(M_alu8_v),
    .n(M_alu8_n)
  );
  
  wire [16-1:0] M_aluscore_alu;
  wire [1-1:0] M_aluscore_z;
  wire [1-1:0] M_aluscore_v;
  wire [1-1:0] M_aluscore_n;
  reg [6-1:0] M_aluscore_alufn;
  reg [16-1:0] M_aluscore_a;
  reg [16-1:0] M_aluscore_b;
  alu_7 aluscore (
    .alufn(M_aluscore_alufn),
    .a(M_aluscore_a),
    .b(M_aluscore_b),
    .alu(M_aluscore_alu),
    .z(M_aluscore_z),
    .v(M_aluscore_v),
    .n(M_aluscore_n)
  );
  
  wire [16-1:0] M_aluscore2_alu;
  wire [1-1:0] M_aluscore2_z;
  wire [1-1:0] M_aluscore2_v;
  wire [1-1:0] M_aluscore2_n;
  reg [6-1:0] M_aluscore2_alufn;
  reg [16-1:0] M_aluscore2_a;
  reg [16-1:0] M_aluscore2_b;
  alu_7 aluscore2 (
    .alufn(M_aluscore2_alufn),
    .a(M_aluscore2_a),
    .b(M_aluscore2_b),
    .alu(M_aluscore2_alu),
    .z(M_aluscore2_z),
    .v(M_aluscore2_v),
    .n(M_aluscore2_n)
  );
  
  reg temp;
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_19 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [30-1:0] M_clock_q;
  reg [1-1:0] M_clock_en;
  reg [30-1:0] M_clock_d;
  register_20 clock (
    .clk(clk),
    .rst(rst),
    .en(M_clock_en),
    .d(M_clock_d),
    .q(M_clock_q)
  );
  reg M_period_d, M_period_q = 1'h0;
  wire [7-1:0] M_scorecounter_q;
  reg [1-1:0] M_scorecounter_en;
  reg [7-1:0] M_scorecounter_d;
  register_21 scorecounter (
    .clk(clk),
    .rst(rst),
    .en(M_scorecounter_en),
    .d(M_scorecounter_d),
    .q(M_scorecounter_q)
  );
  wire [8-1:0] M_template_q;
  reg [1-1:0] M_template_en;
  reg [8-1:0] M_template_d;
  register_22 template (
    .clk(clk),
    .rst(rst),
    .en(M_template_en),
    .d(M_template_d),
    .q(M_template_q)
  );
  wire [8-1:0] M_firstrow_q;
  reg [1-1:0] M_firstrow_en;
  reg [8-1:0] M_firstrow_d;
  register_22 firstrow (
    .clk(clk),
    .rst(rst),
    .en(M_firstrow_en),
    .d(M_firstrow_d),
    .q(M_firstrow_q)
  );
  wire [8-1:0] M_playerrow_q;
  reg [1-1:0] M_playerrow_en;
  reg [8-1:0] M_playerrow_d;
  register_22 playerrow (
    .clk(clk),
    .rst(rst),
    .en(M_playerrow_en),
    .d(M_playerrow_d),
    .q(M_playerrow_q)
  );
  wire [8-1:0] M_lastrow_q;
  reg [1-1:0] M_lastrow_en;
  reg [8-1:0] M_lastrow_d;
  register_22 lastrow (
    .clk(clk),
    .rst(rst),
    .en(M_lastrow_en),
    .d(M_lastrow_d),
    .q(M_lastrow_q)
  );
  wire [5-1:0] M_middlecolumns0_q;
  reg [1-1:0] M_middlecolumns0_en;
  reg [5-1:0] M_middlecolumns0_d;
  register_26 middlecolumns0 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns0_en),
    .d(M_middlecolumns0_d),
    .q(M_middlecolumns0_q)
  );
  wire [5-1:0] M_middlecolumns1_q;
  reg [1-1:0] M_middlecolumns1_en;
  reg [5-1:0] M_middlecolumns1_d;
  register_26 middlecolumns1 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns1_en),
    .d(M_middlecolumns1_d),
    .q(M_middlecolumns1_q)
  );
  wire [5-1:0] M_middlecolumns2_q;
  reg [1-1:0] M_middlecolumns2_en;
  reg [5-1:0] M_middlecolumns2_d;
  register_26 middlecolumns2 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns2_en),
    .d(M_middlecolumns2_d),
    .q(M_middlecolumns2_q)
  );
  wire [5-1:0] M_middlecolumns3_q;
  reg [1-1:0] M_middlecolumns3_en;
  reg [5-1:0] M_middlecolumns3_d;
  register_26 middlecolumns3 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns3_en),
    .d(M_middlecolumns3_d),
    .q(M_middlecolumns3_q)
  );
  wire [5-1:0] M_middlecolumns4_q;
  reg [1-1:0] M_middlecolumns4_en;
  reg [5-1:0] M_middlecolumns4_d;
  register_26 middlecolumns4 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns4_en),
    .d(M_middlecolumns4_d),
    .q(M_middlecolumns4_q)
  );
  wire [5-1:0] M_middlecolumns5_q;
  reg [1-1:0] M_middlecolumns5_en;
  reg [5-1:0] M_middlecolumns5_d;
  register_26 middlecolumns5 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns5_en),
    .d(M_middlecolumns5_d),
    .q(M_middlecolumns5_q)
  );
  wire [5-1:0] M_middlecolumns6_q;
  reg [1-1:0] M_middlecolumns6_en;
  reg [5-1:0] M_middlecolumns6_d;
  register_26 middlecolumns6 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns6_en),
    .d(M_middlecolumns6_d),
    .q(M_middlecolumns6_q)
  );
  wire [5-1:0] M_middlecolumns7_q;
  reg [1-1:0] M_middlecolumns7_en;
  reg [5-1:0] M_middlecolumns7_d;
  register_26 middlecolumns7 (
    .clk(clk),
    .rst(rst),
    .en(M_middlecolumns7_en),
    .d(M_middlecolumns7_d),
    .q(M_middlecolumns7_q)
  );
  wire [3-1:0] M_stage_q;
  reg [1-1:0] M_stage_en;
  reg [3-1:0] M_stage_d;
  register_34 stage (
    .clk(clk),
    .rst(rst),
    .en(M_stage_en),
    .d(M_stage_d),
    .q(M_stage_q)
  );
  localparam START_gamestate = 2'd0;
  localparam DEFAULT_gamestate = 2'd1;
  localparam PLAYING_gamestate = 2'd2;
  localparam GAMEOVER_gamestate = 2'd3;
  
  reg [1:0] M_gamestate_d, M_gamestate_q = START_gamestate;
  
  always @* begin
    M_gamestate_d = M_gamestate_q;
    M_period_d = M_period_q;
    
    score = M_scorecounter_q;
    stages = M_stage_q;
    ledmatrix = 64'h0000000000000000;
    ledmatrix[56+7-:8] = M_firstrow_q;
    ledmatrix[8+7-:8] = M_lastrow_q;
    ledmatrix[0+7-:8] = M_playerrow_q;
    ledmatrix[48+7-:8] = {M_middlecolumns7_q[4+0-:1], M_middlecolumns6_q[4+0-:1], M_middlecolumns5_q[4+0-:1], M_middlecolumns4_q[4+0-:1], M_middlecolumns3_q[4+0-:1], M_middlecolumns2_q[4+0-:1], M_middlecolumns1_q[4+0-:1], M_middlecolumns0_q[4+0-:1]};
    ledmatrix[40+7-:8] = {M_middlecolumns7_q[3+0-:1], M_middlecolumns6_q[3+0-:1], M_middlecolumns5_q[3+0-:1], M_middlecolumns4_q[3+0-:1], M_middlecolumns3_q[3+0-:1], M_middlecolumns2_q[3+0-:1], M_middlecolumns1_q[3+0-:1], M_middlecolumns0_q[3+0-:1]};
    ledmatrix[32+7-:8] = {M_middlecolumns7_q[2+0-:1], M_middlecolumns6_q[2+0-:1], M_middlecolumns5_q[2+0-:1], M_middlecolumns4_q[2+0-:1], M_middlecolumns3_q[2+0-:1], M_middlecolumns2_q[2+0-:1], M_middlecolumns1_q[2+0-:1], M_middlecolumns0_q[2+0-:1]};
    ledmatrix[24+7-:8] = {M_middlecolumns7_q[1+0-:1], M_middlecolumns6_q[1+0-:1], M_middlecolumns5_q[1+0-:1], M_middlecolumns4_q[1+0-:1], M_middlecolumns3_q[1+0-:1], M_middlecolumns2_q[1+0-:1], M_middlecolumns1_q[1+0-:1], M_middlecolumns0_q[1+0-:1]};
    ledmatrix[16+7-:8] = {M_middlecolumns7_q[0+0-:1], M_middlecolumns6_q[0+0-:1], M_middlecolumns5_q[0+0-:1], M_middlecolumns4_q[0+0-:1], M_middlecolumns3_q[0+0-:1], M_middlecolumns2_q[0+0-:1], M_middlecolumns1_q[0+0-:1], M_middlecolumns0_q[0+0-:1]};
    M_template_d = 4'h0;
    M_firstrow_d = 4'h0;
    M_middlecolumns0_d = 4'h0;
    M_middlecolumns1_d = 4'h0;
    M_middlecolumns2_d = 4'h0;
    M_middlecolumns3_d = 4'h0;
    M_middlecolumns4_d = 4'h0;
    M_middlecolumns5_d = 4'h0;
    M_middlecolumns6_d = 4'h0;
    M_middlecolumns7_d = 4'h0;
    M_lastrow_d = 4'h0;
    M_playerrow_d = 8'h00;
    M_clock_en = 1'h0;
    M_scorecounter_en = 1'h1;
    M_template_en = 1'h0;
    M_firstrow_en = 1'h0;
    M_middlecolumns0_en = 1'h0;
    M_middlecolumns1_en = 1'h0;
    M_middlecolumns2_en = 1'h0;
    M_middlecolumns3_en = 1'h0;
    M_middlecolumns4_en = 1'h0;
    M_middlecolumns5_en = 1'h0;
    M_middlecolumns6_en = 1'h0;
    M_middlecolumns7_en = 1'h0;
    M_lastrow_en = 1'h0;
    M_playerrow_en = 1'h0;
    M_stage_en = 1'h0;
    M_alu_a = 1'h0;
    M_alu0_a = 1'h0;
    M_alu1_a = 1'h0;
    M_alu2_a = 1'h0;
    M_alu3_a = 1'h0;
    M_alu4_a = 1'h0;
    M_alu5_a = 1'h0;
    M_alu6_a = 1'h0;
    M_alu7_a = 1'h0;
    M_alu8_a = 1'h0;
    M_aluscore2_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu0_b = 1'h0;
    M_alu1_b = 1'h0;
    M_alu2_b = 1'h0;
    M_alu3_b = 1'h0;
    M_alu4_b = 1'h0;
    M_alu5_b = 1'h0;
    M_alu6_b = 1'h0;
    M_alu7_b = 1'h0;
    M_alu8_b = 1'h0;
    M_aluscore2_b = 1'h0;
    M_alu_alufn = 1'h0;
    M_alu0_alufn = 1'h0;
    M_alu1_alufn = 1'h0;
    M_alu2_alufn = 1'h0;
    M_alu3_alufn = 1'h0;
    M_alu4_alufn = 1'h0;
    M_alu5_alufn = 1'h0;
    M_alu6_alufn = 1'h0;
    M_alu7_alufn = 1'h0;
    M_alu8_alufn = 1'h0;
    M_aluscore2_alufn = 1'h0;
    M_clock_d = 1'h0;
    M_period_d = M_clock_q[27+0-:1];
    M_edge_detector_in = ~M_period_q;
    M_aluscore_a = M_edge_detector_out;
    M_aluscore_b = M_scorecounter_q;
    M_aluscore_alufn = 6'h00;
    M_scorecounter_d = M_aluscore_alu[0+4-:5];
    M_stage_d = 1'h0;
    
    case (M_gamestate_q)
      START_gamestate: begin
        M_firstrow_en = 1'h1;
        M_middlecolumns0_en = 1'h1;
        M_middlecolumns1_en = 1'h1;
        M_middlecolumns2_en = 1'h1;
        M_middlecolumns3_en = 1'h1;
        M_middlecolumns4_en = 1'h1;
        M_middlecolumns5_en = 1'h1;
        M_middlecolumns6_en = 1'h1;
        M_middlecolumns7_en = 1'h1;
        M_lastrow_en = 1'h1;
        M_playerrow_en = 1'h1;
        M_stage_en = 1'h1;
        M_scorecounter_d = 1'h0;
        M_firstrow_d = 4'h0;
        M_middlecolumns0_d = 4'h0;
        M_middlecolumns1_d = 4'h0;
        M_middlecolumns2_d = 5'h17;
        M_middlecolumns3_d = 5'h15;
        M_middlecolumns4_d = 5'h15;
        M_middlecolumns5_d = 5'h1d;
        M_middlecolumns6_d = 4'h0;
        M_middlecolumns7_d = 4'h0;
        M_lastrow_d = 4'h0;
        M_playerrow_d = 8'h00;
        M_stage_d = 1'h0;
        if (button_start) begin
          M_gamestate_d = DEFAULT_gamestate;
        end
      end
      DEFAULT_gamestate: begin
        M_scorecounter_d = 1'h0;
        M_template_en = 1'h1;
        M_firstrow_en = 1'h1;
        M_middlecolumns0_en = 1'h1;
        M_middlecolumns1_en = 1'h1;
        M_middlecolumns2_en = 1'h1;
        M_middlecolumns3_en = 1'h1;
        M_middlecolumns4_en = 1'h1;
        M_middlecolumns5_en = 1'h1;
        M_middlecolumns6_en = 1'h1;
        M_middlecolumns7_en = 1'h1;
        M_lastrow_en = 1'h1;
        M_playerrow_en = 1'h1;
        M_stage_en = 1'h1;
        M_template_d = 8'hf7;
        M_firstrow_d = 8'hfe;
        M_middlecolumns0_d = 5'h1f;
        M_middlecolumns1_d = 5'h17;
        M_middlecolumns2_d = 5'h1f;
        M_middlecolumns3_d = 5'h1b;
        M_middlecolumns4_d = 5'h1d;
        M_middlecolumns5_d = 5'h0f;
        M_middlecolumns6_d = 5'h1e;
        M_middlecolumns7_d = 5'h1f;
        M_lastrow_d = 8'hf7;
        M_playerrow_d = 8'h08;
        M_stage_d = 1'h1;
        M_gamestate_d = PLAYING_gamestate;
      end
      PLAYING_gamestate: begin
        M_clock_en = 1'h1;
        M_clock_d = M_clock_q + 1'h1;
        M_template_en = 1'h0;
        M_firstrow_en = 1'h0;
        M_middlecolumns0_en = 1'h0;
        M_middlecolumns1_en = 1'h0;
        M_middlecolumns2_en = 1'h0;
        M_middlecolumns3_en = 1'h0;
        M_middlecolumns4_en = 1'h0;
        M_middlecolumns5_en = 1'h0;
        M_middlecolumns6_en = 1'h0;
        M_middlecolumns7_en = 1'h0;
        M_lastrow_en = 1'h0;
        M_playerrow_en = 1'h0;
        if (M_scorecounter_q >= 3'h5 && M_scorecounter_q < 4'hf) begin
          M_period_d = M_clock_q[26+0-:1];
          M_stage_en = 1'h1;
          M_stage_d = 2'h2;
          M_aluscore2_a = M_edge_detector_out;
          M_aluscore2_b = 4'h2;
          M_aluscore2_alufn = 6'h02;
          M_aluscore_a = M_aluscore2_alu;
          M_aluscore_b = M_scorecounter_q;
          M_aluscore_alufn = 6'h00;
          M_scorecounter_d = M_aluscore_alu[0+6-:7];
        end
        if (M_scorecounter_q >= 4'hf && M_scorecounter_q < 5'h1e) begin
          M_period_d = M_clock_q[25+0-:1];
          M_stage_en = 1'h1;
          M_stage_d = 2'h3;
          M_aluscore2_a = M_edge_detector_out;
          M_aluscore2_b = 4'h3;
          M_aluscore2_alufn = 6'h02;
          M_aluscore_a = M_aluscore2_alu;
          M_aluscore_b = M_scorecounter_q;
          M_aluscore_alufn = 6'h00;
          M_scorecounter_d = M_aluscore_alu[0+6-:7];
        end
        if (M_scorecounter_q >= 5'h1e) begin
          M_period_d = M_clock_q[25+0-:1];
          M_stage_en = 1'h1;
          M_stage_d = 3'h4;
          M_aluscore2_a = M_edge_detector_out;
          M_aluscore2_b = 4'h4;
          M_aluscore2_alufn = 6'h02;
          M_aluscore_a = M_aluscore2_alu;
          M_aluscore_b = M_scorecounter_q;
          M_alu_alufn = 6'h00;
          M_scorecounter_d = M_aluscore_alu[0+6-:7];
        end
        if (button_start) begin
          M_gamestate_d = START_gamestate;
        end
        if (button_L) begin
          M_playerrow_en = 1'h1;
          M_alu_a = M_playerrow_q;
          M_alu_b = 3'h1;
          M_alu_alufn = 6'h24;
          M_playerrow_d = M_alu_alu[0+7-:8];
          M_playerrow_d[0+0-:1] = M_alu_alu[8+0-:1];
        end
        if (button_R) begin
          M_playerrow_en = 1'h1;
          M_alu_a = M_playerrow_q;
          M_alu_b = 3'h1;
          M_alu_alufn = 6'h25;
          M_playerrow_d = M_alu_alu[0+7-:8];
          M_playerrow_d[7+0-:1] = M_alu_alu[15+0-:1];
        end
        if (M_edge_detector_out) begin
          M_alu_a = M_playerrow_q;
          M_alu_b = M_lastrow_q;
          M_alu_alufn = 6'h16;
          temp = (&{M_alu_alu[0+7-:8]});
          if (~temp) begin
            M_scorecounter_en = 1'h0;
            M_gamestate_d = GAMEOVER_gamestate;
          end else begin
            M_template_en = 1'h1;
            M_firstrow_en = 1'h1;
            M_middlecolumns0_en = 1'h1;
            M_middlecolumns1_en = 1'h1;
            M_middlecolumns2_en = 1'h1;
            M_middlecolumns3_en = 1'h1;
            M_middlecolumns4_en = 1'h1;
            M_middlecolumns5_en = 1'h1;
            M_middlecolumns6_en = 1'h1;
            M_middlecolumns7_en = 1'h1;
            M_lastrow_en = 1'h1;
            M_lastrow_d = {M_middlecolumns7_q[0+0-:1], M_middlecolumns6_q[0+0-:1], M_middlecolumns5_q[0+0-:1], M_middlecolumns4_q[0+0-:1], M_middlecolumns3_q[0+0-:1], M_middlecolumns2_q[0+0-:1], M_middlecolumns1_q[0+0-:1], M_middlecolumns0_q[0+0-:1]};
            M_alu7_a = M_middlecolumns7_q;
            M_alu7_b = 1'h1;
            M_alu7_alufn = 6'h21;
            M_middlecolumns7_d = M_alu7_alu[0+4-:5];
            M_middlecolumns7_d[4+0-:1] = M_firstrow_q[7+0-:1];
            M_alu6_a = M_middlecolumns6_q;
            M_alu6_b = 1'h1;
            M_alu6_alufn = 6'h21;
            M_middlecolumns6_d = M_alu6_alu[0+4-:5];
            M_middlecolumns6_d[4+0-:1] = M_firstrow_q[6+0-:1];
            M_alu5_a = M_middlecolumns5_q;
            M_alu5_b = 1'h1;
            M_alu5_alufn = 6'h21;
            M_middlecolumns5_d = M_alu5_alu[0+4-:5];
            M_middlecolumns5_d[4+0-:1] = M_firstrow_q[5+0-:1];
            M_alu4_a = M_middlecolumns4_q;
            M_alu4_b = 1'h1;
            M_alu4_alufn = 6'h21;
            M_middlecolumns4_d = M_alu4_alu[0+4-:5];
            M_middlecolumns4_d[4+0-:1] = M_firstrow_q[4+0-:1];
            M_alu3_a = M_middlecolumns3_q;
            M_alu3_b = 1'h1;
            M_alu3_alufn = 6'h21;
            M_middlecolumns3_d = M_alu3_alu[0+4-:5];
            M_middlecolumns3_d[4+0-:1] = M_firstrow_q[3+0-:1];
            M_alu2_a = M_middlecolumns2_q;
            M_alu2_b = 1'h1;
            M_alu2_alufn = 6'h21;
            M_middlecolumns2_d = M_alu2_alu[0+4-:5];
            M_middlecolumns2_d[4+0-:1] = M_firstrow_q[2+0-:1];
            M_alu1_a = M_middlecolumns1_q;
            M_alu1_b = 1'h1;
            M_alu1_alufn = 6'h21;
            M_middlecolumns1_d = M_alu1_alu[0+4-:5];
            M_middlecolumns1_d[4+0-:1] = M_firstrow_q[1+0-:1];
            M_alu0_a = M_middlecolumns0_q;
            M_alu0_b = 1'h1;
            M_alu0_alufn = 6'h21;
            M_middlecolumns0_d = M_alu0_alu[0+4-:5];
            M_middlecolumns0_d[4+0-:1] = M_firstrow_q[0+0-:1];
            M_alu8_a = M_lastrow_q;
            M_alu8_b = 8'h03;
            M_alu8_alufn = 6'h25;
            M_template_d = M_alu8_alu[0+7-:8];
            M_template_d[5+2-:3] = M_alu8_alu[13+2-:3];
            M_firstrow_d = M_template_q;
            M_gamestate_d = PLAYING_gamestate;
          end
        end
      end
      GAMEOVER_gamestate: begin
        M_clock_en = 1'h1;
        M_clock_d = 1'h0;
        M_scorecounter_en = 1'h0;
        M_firstrow_en = 1'h1;
        M_middlecolumns0_en = 1'h1;
        M_middlecolumns1_en = 1'h1;
        M_middlecolumns2_en = 1'h1;
        M_middlecolumns3_en = 1'h1;
        M_middlecolumns4_en = 1'h1;
        M_middlecolumns5_en = 1'h1;
        M_middlecolumns6_en = 1'h1;
        M_middlecolumns7_en = 1'h1;
        M_lastrow_en = 1'h1;
        M_playerrow_en = 1'h1;
        M_firstrow_d = 8'h42;
        M_middlecolumns1_d = 5'h01;
        M_middlecolumns2_d = 5'h12;
        M_middlecolumns3_d = 5'h0c;
        M_middlecolumns4_d = 5'h0c;
        M_middlecolumns5_d = 5'h12;
        M_middlecolumns6_d = 5'h01;
        M_middlecolumns7_d = 5'h00;
        M_lastrow_d = 8'h00;
        M_playerrow_d = 9'h000;
        if (button_start) begin
          M_gamestate_d = START_gamestate;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_period_q <= 1'h0;
      M_gamestate_q <= 1'h0;
    end else begin
      M_period_q <= M_period_d;
      M_gamestate_q <= M_gamestate_d;
    end
  end
  
endmodule
